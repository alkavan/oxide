name: CMake on multiple platforms

permissions:
  contents: write

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      # Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install libc++
        if: ${{ matrix.c_compiler == 'clang' }}
        run: sudo apt update && sudo apt install -y libc++-19-dev libc++abi-19-dev

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs.
        # These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Set build flags
        id: flags
        shell: bash
        run: |
          echo "cxx_standard=23" >> $GITHUB_OUTPUT
          if [ "${{ matrix.c_compiler }}" == "clang" ]; then
            echo "cxx_flags=-stdlib=libc++" >> $GITHUB_OUTPUT
            echo "linker_flags=-lc++abi" >> $GITHUB_OUTPUT
          else
            echo "cxx_flags=" >> $GITHUB_OUTPUT
            echo "linker_flags=" >> $GITHUB_OUTPUT
          fi

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory.
        # `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_CXX_STANDARD=${{ steps.flags.outputs.cxx_standard }}
          -DCMAKE_CXX_STANDARD_REQUIRED=ON
          -DCMAKE_CXX_FLAGS="${{ steps.flags.outputs.cxx_flags }}"
          -DCMAKE_EXE_LINKER_FLAGS="${{ steps.flags.outputs.linker_flags }}"
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration.
        # Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./${{ matrix.build_type }}/oxide_examples.exe
          else
            ./oxide_examples
          fi
        shell: bash

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Create Release and Upload oxide.hpp
        uses: softprops/action-gh-release@v2
        with:
          files: oxide.hpp
          name: RELEASE ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}